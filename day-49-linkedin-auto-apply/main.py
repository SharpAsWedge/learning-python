# In today's project, the goal was to automate the job application page of LinkedIn
# The webpage is https://www.linkedin.com/jobs/
# In the course, it looked a bit different than it does for me but I hope I can
# get around it somehow, I don't know how though
# We will use the "Easy Apply" feature to fill up the data required for the application

# The first step was to actually have a LinkedIn account. I could use a temp account
# with random info, but I may as well go with my main, I got nothing to lose anyway
# Next, I uploaded the resume to the "Job Application Settings" so that I don't have to
# upload it with each application manually.
# Okay from the course instructions, I found out we are supposed to use the filtered
# URL so we don't need to worry about that for now
URL = "https://www.linkedin.com/jobs/search/?currentJobId=3968894038&f_AL=true&keywords=python%20developer&origin=JOB_SEARCH_PAGE_JOB_FILTER&refresh=true"
EMAIL = "<YOUR_EMAIL>"
PASSWORD = "<YOUR_PASS>"
PHONE_NO = "<YOUR_PHONE_NUMBER>"

# Now let's set up the webdriver with all the classes, By and Keys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common import exceptions
# Since we'll need to wait for the page to load for multi page operations, we'll use sleep
import time

chrome_options = webdriver.ChromeOptions()
chrome_options.add_experimental_option("detach", True)

driver = webdriver.Chrome(options= chrome_options)
driver.get(URL)

# Signing up to LinkedIn with my email and password
# This was a delegated task before the actual application automation
# Since it is a link, I can simply find the link for it and click on it
time.sleep(5)
# Wait for the homepage to load fully
signin_btn = driver.find_element(By.LINK_TEXT, "Sign in")
signin_btn.click()

# Now to fill the information, we need to wait a bit of time for the page to load
time.sleep(5)
# For the username and password fields, I can get them by their id
uname_input = driver.find_element(By.ID, "username")
uname_input.send_keys(EMAIL)

pass_input = driver.find_element(By.ID, "password")
pass_input.send_keys(PASSWORD)

submit_btn = driver.find_element(By.CSS_SELECTOR, ".login__form_action_container button")
submit_btn.click()

# Now that the sign in is done and I'm in the desired page, let's get to the real problem
# But first, I have an annoyance with the message thing that pops up on that page, so I
# want to close it down first. I have identified its ID so let's close it first
time.sleep(20)
collapse_msg = driver.find_elements(By.CSS_SELECTOR, ".msg-overlay-bubble-header button")[-1]
# It had an "ember" id which may be generated by JS so I'll use another way
# Since the button is at the last of the header, I might use that instead
collapse_msg.click()

# Now finally the core part of the problem
# The tags seem to follow a pattern, but I hope it's not shuffled with time
# Let's click on the easy apply button first
                    # easy_apply = driver.find_element(By.CLASS_NAME, "jobs-apply-button")
                    # easy_apply.click()
# Now when the form shows up, we need to fill up only the phone number field.
# The email is already filled for us
# As I expected, the ember whatever number will differ from one job to another
# So I'll need to find some other way to pinpoint the phone number input
# Can't go wrong with the XPath
                    # time.sleep(0.5)
                    # phone_input = driver.find_element(By.XPATH, '//*[@id="single-line-text-form-component-formElement-urn-li-jobs-applyformcommon-easyApplyFormElement-3963910572-3122087501-phoneNumber-nationalNumber"]')
                    # phone_input.send_keys(PHONE_NO)

# There seems to be a single button in the footer so that should be the next button
                    # submit_btn = driver.find_element(By.CSS_SELECTOR, "footer button")
                    # submit_btn.click()
                    # time.sleep(0.5)
# Now in the resume page, the resume is uploaded and I just need to press next
# But here, there are two buttons in the same footer
# I could try scratching my head for a while but I think I'll just cheat(or is it ðŸ¤¨?)
# and select the second one since the next button is after the back button all the time
                    # submit_btn = driver.find_elements(By.CSS_SELECTOR, "footer button")[1]
                    # submit_btn.click()
# Now after this question, apparently the companies ask mandatory questions which can't
# be automated that easily. So I might have to stick to just saving the jobs and following
# the companies rather than applying. That is an option as well so maybe I'll stick to that


# For the Save action, we can just press the save button, pretty straightforward
                # save_btn = driver.find_element(By.CLASS_NAME, "jobs-save-button")
                # save_btn.click()

# Similarly for the follow button:
                # time.sleep(2)
# I think the "toast item" is not letting the follow be clicked, so I'll remove it to see
# toast_close = driver.find_element(By.CSS_SELECTOR, ".artdeco-toast-item button")
# toast_close.click()
# It wasn't the case
# Need at least a little time to process the save action
                # follow_btn = driver.find_element(By.CSS_SELECTOR, ".jobs-company .follow")
                # driver.execute_script("arguments[0].click();", follow_btn)
# The above code was copied from StackOverflow and was said to be able to solve the
# ElementClickInterceptedException that kept appearing when trying to follow because
# the message overlay would get in the way of the click

# Now I just need to automate the process for the whole page.
# Let's try to do it manually and see what happens first
# OKay I get the idea. We first do the deed with the first job, then we click on the
# first list item in the left pane, then repeat the process, at the end of each iteration
# we should remove the first item by clicking the cross and then press the next first one
# If there is nothing left, we can use the NoSuchElement Exception

idx = 0
while(True):
    save_btn = driver.find_element(By.CLASS_NAME, "jobs-save-button")
    save_btn.click()

    time.sleep(2)
    follow_btn = driver.find_element(By.CSS_SELECTOR, 'button[class*="follow"]')
    driver.execute_script("arguments[0].click();", follow_btn)
    
    # Remove the first item (current item)
    # Well, the item even after being removed will still be there so there's not much point
    # So we'll just have a list of elements and click on them in order
    # driver.find_element(By.CSS_SELECTOR,".jobs-search-results-list").send_keys(Keys.CONTROL, Keys.END)
    # Since it only found the visible elements, we will need to first scroll to the end of the list
    # Then all the links will appear as per the script, then we can find them all
    # The code didn't work, so I'll just have to deal with having only 7 elements for now
    all_jobs = driver.find_elements(By.CSS_SELECTOR, ".job-card-container--clickable")
    # print(len(all_jobs))
    # Even with the code in the 
    # There's only one anchor tag inside each element of the main list
    idx += 1
    # Select the next item
    try:
        driver.execute_script("arguments[0].click();", all_jobs[idx])
        # Had to use this here too, seems like these things love interrupting the clicks
    except exceptions.NoSuchElementException:
        print(f"No such element at {all_jobs[idx]}")
        continue
    except IndexError:
        print(f"Index exceeded: {idx+1} out of {len(all_jobs)}")
        break


driver.quit()